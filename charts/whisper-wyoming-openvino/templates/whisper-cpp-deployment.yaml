apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "whisper-wyoming-openvino.fullname" . }}-whisper-cpp
  labels:
    {{- include "whisper-wyoming-openvino.whisperCppLabels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "whisper-wyoming-openvino.whisperCppSelectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "whisper-wyoming-openvino.whisperCppSelectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- if .Values.modelDownload.enabled }}
      initContainers:
      - name: model-download
        image: "{{ .Values.modelDownload.image.repository }}:{{ .Values.modelDownload.image.tag }}"
        imagePullPolicy: {{ .Values.modelDownload.image.pullPolicy }}
        command:
        - sh
        - -c
        - |
          set -e
          MODEL="{{ .Values.whisperCpp.model }}"
          MODEL_DIR="/models"
          mkdir -p "$MODEL_DIR"
          
          # OpenVINO IR-format files (for Intel GPU acceleration)
          XML_FILE="$MODEL_DIR/ggml-${MODEL}-encoder-openvino.xml"
          BIN_FILE="$MODEL_DIR/ggml-${MODEL}-encoder-openvino.bin"

          # Convert to OpenVINO if not already done
          if [ ! -f "$XML_FILE" ] || [ ! -f "$BIN_FILE" ]; then
            echo "Converting model to OpenVINO: $MODEL"
            
            cd "$MODEL_DIR"
            
            # Set cache directory for whisper model downloads
            export XDG_CACHE_HOME="$MODEL_DIR/.cache"
            
            # Run conversion using uv
            uv run --with 'openvino-dev[pytorch,onnx]' --with openai-whisper \
              /scripts/convert-whisper-to-openvino.py --model "$MODEL"
            
            echo "OpenVINO model conversion complete"
          else
            echo "OpenVINO model already exists: $MODEL"
          fi
          
          # Ensure SYCL cache directory exists
          mkdir -p "${MODEL_DIR}/sycl_cache"
        volumeMounts:
        - name: models
          mountPath: /models
        - name: conversion-script
          mountPath: /scripts
        securityContext:
          {{- toYaml .Values.whisperCpp.securityContext | nindent 10 }}
      {{- end }}
      containers:
      - name: whisper-cpp
        image: "{{ .Values.whisperCpp.image.repository }}:{{ .Values.whisperCpp.image.tag }}"
        imagePullPolicy: {{ .Values.whisperCpp.image.pullPolicy }}
        args:
        - "-l"
        - "{{ .Values.whisperCpp.language }}"
        - "-bs"
        - "{{ .Values.whisperCpp.beamSize }}"
        - "-m"
        - "/models/{{ .Values.whisperCpp.model }}.bin"
        - "--host"
        - "0.0.0.0"
        - "--port"
        - "{{ .Values.whisperCpp.service.port }}"
        - "--suppress-nst"
        {{- if .Values.whisperCpp.prompt }}
        - "--prompt"
        - "{{ .Values.whisperCpp.prompt }}"
        {{- end }}
        ports:
        - name: http
          containerPort: {{ .Values.whisperCpp.service.port }}
          protocol: TCP
        env:
        {{- range $key, $value := .Values.whisperCpp.env }}
        - name: {{ $key }}
          value: {{ $value | quote }}
        {{- end }}
        volumeMounts:
        - name: models
          mountPath: /models
        resources:
          {{- toYaml .Values.whisperCpp.resources | nindent 10 }}
        securityContext:
          {{- toYaml .Values.whisperCpp.securityContext | nindent 10 }}
        livenessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
      volumes:
      - name: models
        {{- if .Values.persistence.enabled }}
        persistentVolumeClaim:
          claimName: {{ .Values.persistence.existingClaim | default (printf "%s-models" (include "whisper-wyoming-openvino.fullname" .)) }}
        {{- else }}
        emptyDir: {}
        {{- end }}
      - name: conversion-script
        configMap:
          name: {{ include "whisper-wyoming-openvino.fullname" . }}-conversion-script
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
